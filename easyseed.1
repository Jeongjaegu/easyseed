.\" By nullius <nullius@nym.zone>
.\" PGP: 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
.\" Bitcoin: 3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG
.\"
.\" Copyright (c) 2017-18.  All rights reserved.
.\"
.\" The Antiviral License (AVL) v0.0.1, with added Bitcoin Consensus Clause:
.\"
.\" Redistribution and use in source and binary forms, with or without
.\" modification, are permitted provided that the following conditions
.\" are met:
.\"
.\" 1. Redistributions of the source code must retain the above copyright
.\"    and credit notices, this list of conditions, and the following
.\"    disclaimer.
.\" 2. Redistributions in binary form must reproduce the above copyright
.\"    and credit notices, this list of conditions, and the following
.\"    disclaimer in the documentation and/or other materials provided
.\"    with the distribution.
.\" 3. Derivative works hereof MUST NOT be redistributed under any license
.\"    containing terms which require derivative works and/or usages to
.\"    publish source code, viz. what is commonly known as a "copyleft"
.\"    or "viral" license.
.\" 4. Derivative works hereof which have any functionality related to
.\"    digital money (so-called "cryptocurrency") MUST EITHER adhere to
.\"    consensus rules fully compatible with Bitcoin Core, OR use a name
.\"    which does not contain the word "Bitcoin".
.\"
.\" THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND CONTRIBUTORS ``AS IS'' AND
.\" ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
.\" IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
.\" ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR CONTRIBUTORS BE LIABLE
.\" FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
.\" DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
.\" OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
.\" HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\" LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY
.\" OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
.\" SUCH DAMAGE.
.\"
.Dd January 9, 2018
.Dt EASYSEED 1
.Os Bitcoin
.Sh NAME
.Nm easyseed
.Nd "Bitcoin BIP 39 mnemonic seed phrase generator"
.Sh SYNOPSIS
.Nm
.Fl b Ar bits
.Op Fl l Ar lang
.Op Fl k Ar keyfile
.Op Fl p | Fl j Ar passfile
.Op Fl A
.Pp
List languages:
.Pp
.Nm
.Fl L
.Pp
Print wordlist:
.Pp
.Nm
.Fl P
.Op Fl l Ar lang
.Pp
Full, verbose self-tests:
.Pp
.Nm
.Fl T
.Sh DESCRIPTION
.Nm
is a BIP 39 Bitcoin seed phrase generator which is intended to be
portable and auditable, with minimal dependencies and easy-to-read
source code.
The intended use case is seed phrase generation on an airgap machine.
To protect safety of user funds, a battery of standard test vectors is
run on every use.
.Pp
A seed is read off the system random device; and corresponding
seed words are printed to standard output.
.Pp
In general usage, the options are as follows:
.Bl -tag -width ".Fl d Ar argument"
.It Fl A
Output all basic information for creation and use of a BIP 39 mnemonic backup
to a BIP 32 Hierarchical Deterministic
.Pq HD
wallet.
Information is provided in a freeform text format which is designed to be
reasonably easy to parse in scripts; however, the format should not yet be
considered stable.
The information provided:
.Bl -bullet
.It
The input entropy, as a hexadecimal string.
.It
The mnemonic phrase corresponding to that entropy.
.It
The output seed value created through PBKDF2
.Pq "with optional passphrase"
as specified by BIP 39, as a hexadecimal string.
.It
The BIP 32
.Dq xprv
extended master private key, generated from the seed value as specified in
BIP 32.
.Bf Sy
See the
.Sx CAVEATS
section before using with popular light clients.
.Ef
.El
.It Fl b Ar bits
.Sy Required.
Generate a mnemonic phrase representing a seed with
.Ar bits
bits.
Valid values for
.Ar bits
and the word length they produce are as follows:
.Pp
.TS
lb lb
c c.
Bits	Words
128	12
160	15
192	18
224	21
256	24
.TE
.It Fl j Ar passfile
Read the optional passphrase from the specified
.Ar passfile .
Use
.Pa "-"
to specify standard input.
Exclusive of the
.Fl p
option.
.It Fl k Ar keyfile
Read key material (entropy) in the form of binary octets from the specified
.Ar keyfile .
.Sy The actual length of keymat provided must match the specified number of bits.
Use
.Pa "-"
to specify standard input.
If this option is not given, then
.Nm
obtains entropy from the
.Xr random 4
device.
.It Fl l Ar lang
Produce a mnemonic in the language or writing system
.Ar lang .
The language may be specified via various identifiers as listed by the
.Fl L
option.
In alphabetical order, currently supported languages and writing systems are
Chinese
.Pq Simplified ,
Chinese
.Pq Traditional ,
English, French, Italian, Japanese, Korean, and Spanish.
The default language is English.
.It Fl p
Use an optional passphrase, obtained from the terminal.
This is an interactive option; the user will be prompted to enter the
passphrase, then re-enter it for confirmation.
.Nm
will refuse to proceed if standard input is not a
.Xr tty 4 .
Exclusive of the
.Fl j
option.
.El
.Pp
The following modes do not produce a mnemonic phrase:
.Bl -tag -width ".Fl d Ar argument"
.It Fl L
List languages and writing systems which may be used with the
.Fl l Ar lang
option, then exit.
Any of the listed strings may be used as an identifier.
.It Fl P
Print the wordlist to stdout in the source format used at build time,
and print the SHA-256 hash of the wordlist to stderr; then exit.
.It Fl T
Run a full battery of self-tests with verbose results printed to stdout,
then exit.
An abbreviated self-test is run each and every time the
.Nm
utility is used.
.El
.Sh EXIT STATUS
.Ex -std
.Sh EXAMPLES
Generate a 24-word mnemonic representing a 256-bit random seed:
.Pp
.Dl "umask 077"
.Dl "easyseed -b 256 > myseed.txt"
.Pp
Generate an 18-word mnemonic in the Japanese language,
representing a 192-bit random seed:
.Pp
.Dl "easyseed -b 192 -l japanese"
.Pp
Use bits from a keyfile:
.Dl "dd if=/dev/random of=secret.key bs=32 count=1"
.Dl "easyseed -b 256 -k secret.key > myseed.txt"
or
.Dl "easyseed -b 256 -k - < secret.key > myseed.txt"
.Sh STANDARDS
The
.Nm
utility implements all functionality specified by Bitcoin
.Lk https://github.com/bitcoin/bips/blob/master/bip-0039.mediawiki "BIP 39" .
.Pp
It also implements some functionality from
utility implements all functionality specified by Bitcoin
.Lk https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki "BIP 32" .
.Pp
Nonstandard behaviour may be offered by currently undocumented options.
.Sh AUTHORS
By
.An nullius
.Aq Mt nullius@nym.zone .
.Pp
PGP:
.Li 0xC2E91CD74A4C57A105F6C21B5A00591B2F307E0C
.Pp
Tips:
.Lk bitcoin:3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG 3NULL3ZCUXr7RDLxXeLPDMZDZYxuaYkCnG .
.Sh CAVEATS
.Bf Sy
The BIP 32
.Dq xprv
output encodes the extended
.Em master
private key with a depth of 0.
This behaviour is correct and consistent with the BIP 39 and BIP 32 standards.
However, at least one known client, Electrum, will misinterpret this as
a depth 3 extended
.Em child
key, and produce a wallet full of incorrect addresses which do not match the
addresses derived from the mnemonic.
This could result in user funds loss.
See
.Lk https://github.com/spesmilo/electrum/issues/3671 "Electrum Issue #3671" .
.Ef
.Pp
Most users are apparently still generating airgap seed phrases with
Javascript-based seed phrase generators.
Adequate random number generation is impossible from within Javascript.
Users should use the
.Nm
utility instead.
.Sh BUGS
Language support is necessarily finite.
The
.Nm
utility supports all languages which have official BIP 39
wordlists in the Bitcoin BIP repository.
To add your language to the
.Nm
utility, add a wordlist for your language to the BIP 39 wordlist set.
.Pp
The author monkey-pasted language names from a popular wiki site.
If the
.Fl L
option shows an incorrect name for your language,
.Em in
your language, then please file a bug or contact the author.
.Pp
The short identifiers for the two distinct Chinese writing systems are
suboptimal, and inconsistent with reality.
Better suggestions would be appreciated.
.Sh SECURITY CONSIDERATIONS
For secure seed phrase generation, it is imperative to use an adequate
CSPRNG as a source of randomness.
The
.Nm
utility draws randomness off the system
.Ap
s
.Xr random 4
device.
To avoid blocking on Linux,
.Nm
reads off
.Pa /dev/urandom .
The author deems this to be adequate.
On other reasonable systems, such as
.Fx ,
.Pa /dev/urandom
is a symlink to
.Pa /dev/random ;
thus, this is a non-issue.
.Pp
.Nm
performs basic sanitization to zeroize and remove keymat (key material)
from memory.
It also takes special measures to avoid or clean up any userland buffering in
.Xr printf 3 .
However, this does nothing to prevent secret bits from being left
in the memory areas used by the kernel for file or pipe buffers.
.Pp
In proper use on a dedicated airgap machine, this should be of
lesser concern than on a multiuser and/or networked system.
.Nm
will leave far less data remanence than most other software which
deals with secret keys.
Also,
.Nm
is far superior to utilities written in Javascript and similar,
which have absolutely no control of garbage collection and memory release.
